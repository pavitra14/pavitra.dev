{"pageProps":{"postData":{"id":"linkedlist-implementation-operations","contentHtml":"<p><img src=\"https://i.imgur.com/NgbfvK9.png\" alt=\"Linked List\"></p>\n<h1>What is a Linked List?</h1>\n<p>A Linked list is a common data structure made of chain of nodes, in which each node contains two fields, <em>data</em>  which holds the data and <em>next</em> which holds the address to next node in the chain.</p>\n<p>The <strong>head pointer</strong> points to the first node, and the last element of the list points to <strong>null</strong>. When the list is empty, the head pointer points to <strong>null</strong>.</p>\n<p>Linked lists can dynamically increase in size and it is easy to insert and delete from a linked list because unlike arrays, we only need to change the pointers of the previous element and the next element to insert or delete an element.</p>\n<p>Linked lists are typically used to create file systems, adjacency lists, and hash tables.</p>\n<h3>Types of Linked Lists</h3>\n<ul>\n<li>Singly Linked List (Uni-directional)</li>\n<li>Doubly Linked List (Bi-directional)</li>\n<li>Circular Linked List</li>\n</ul>\n<p>Linked Lists are very widely used in the industry and it is also one of the most important topics which you should positively know before appearing for a technical interview. Operations on Linked Lists are fairly easy, but optimised operations are what catches the eye. In this article, we'll take a look at most of them, in their most optimised form (Linear Time Complexity at max).</p>\n<p>We're using C++ as our base language and will continue to do so for most DSA tutorials.</p>\n<h2>Operations on Linked Lists</h2>\n<h3>Creating the List Data Structure</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;bits/stdc++.h></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Objects of this class will act as nodes in our list</span>\nclass Node <span class=\"token punctuation\">{</span>\n  public<span class=\"token operator\">:</span>\n  <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    this<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Creating a List</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//Will create a sample Linked List of length n, where data will be (i...n)x10 (10,20,30....)</span>\nNode<span class=\"token operator\">*</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Can also use traditional arrays with malloc</span>\n\t<span class=\"token comment\">//\tint* nodes = (int*) malloc(sizeof(int)*n);</span>\n  <span class=\"token comment\">//Creating Nodes</span>\n  vector<span class=\"token operator\">&#x3C;</span>Node<span class=\"token operator\">*</span><span class=\"token operator\">></span> nodes<span class=\"token punctuation\">;</span> <span class=\"token comment\">//Vector to store nodes temporarily</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;=</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//nodes[i] = new Node(i*10); //if using traditional arrays</span>\n    nodes<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//pushing new nodes back into the vector </span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//Connecting individual nodes</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//Returning the head node</span>\n  <span class=\"token keyword\">return</span> nodes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Displaying/Printing a List</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"----------------------------------\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span>temp<span class=\"token operator\">-></span>data<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"->\"</span><span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span>temp<span class=\"token operator\">-></span>data<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"----------------------------------\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* Output</span>\n<span class=\"token comment\">----------------------------------</span>\n<span class=\"token comment\">10->20->30->40->50->60->70->80->90->100->110->120->130->140->150->160->170->180->190->200->210->220->230->240->250</span>\n<span class=\"token comment\">----------------------------------</span>\n<span class=\"token comment\">*/</span>\n</code></pre></div>\n<h3>Getting Size/Length of Linked List (Linear Time Complexity/ O(n))</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Size of List is \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>n<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Inserting at last of Linked List (Linear Time Complexity O(n))</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">insert_at_last</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Inserting at front of Linked List (Constant Time Complexity O(1))</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\">Node<span class=\"token operator\">*</span> <span class=\"token function\">insert_at_first</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> new <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Inserting a Node after Nth Node in Linked List (Linear Time Complexity dependent on value of N O(N))</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">insert_after_n</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">&#x26;&#x26;</span> i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    throw <span class=\"token string\">\"LinkedList Overflow: N doesn't exist\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  Node<span class=\"token operator\">*</span> forward <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> forward<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Removing a node from Last/Tail of Linked List (Linear Time Complexity O(n))</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">remove_from_last</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Removing Nth Node from Tail of Linked List (1 Pass + Linear Time Complexity / Two Pointer Method)</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">remove_n_from_last</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> offset <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>offset<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&#x26;&#x26;</span> i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    offset <span class=\"token operator\">=</span> offset<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    throw <span class=\"token string\">\"LinkedList Overflow: N doesn't exist\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>offset<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    offset <span class=\"token operator\">=</span> offset<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  Node<span class=\"token operator\">*</span> forward <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> forward<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Reversing a Linked List (Linear Time Complexity O(n))</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\">Node<span class=\"token operator\">*</span> <span class=\"token function\">reverse_list</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> curr <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>curr <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> curr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    curr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n    prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\n    curr <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Find the Middle Node of Linked List (1 Pass + Linear Time Complexity/ Two Pointer Double Speed Method)</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">middleNode</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> fast <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Middle Node is: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>slow<span class=\"token operator\">-></span>data<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Check if the Linked List has a Cycle (1 Pass + Linear Time Complexity/ Two Pointer Double Step Method)</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">checkCycle</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> fast <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fast<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>slow <span class=\"token operator\">==</span> fast<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>Let's Compile the above code in a single file and test!</h2>\n<h3><em><strong>LinkedList.cpp</strong></em></h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;bits/stdc++.h></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\nclass Node <span class=\"token punctuation\">{</span>\n  public<span class=\"token operator\">:</span>\n  <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    this<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nNode<span class=\"token operator\">*</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Creating Nodes</span>\n  vector<span class=\"token operator\">&#x3C;</span>Node<span class=\"token operator\">*</span><span class=\"token operator\">></span> nodes<span class=\"token punctuation\">;</span> <span class=\"token comment\">//Vector to store nodes temporarily</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;=</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    nodes<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//Connecting individual nodes</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> nodes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"----------------------------------\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span>temp<span class=\"token operator\">-></span>data<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"->\"</span><span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span>temp<span class=\"token operator\">-></span>data<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"----------------------------------\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Size of List is \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>n<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insert_at_last</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nNode<span class=\"token operator\">*</span> <span class=\"token function\">insert_at_first</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> new <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">insert_after_n</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">&#x26;&#x26;</span> i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    throw <span class=\"token string\">\"LinkedList Overflow: N doesn't exist\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  Node<span class=\"token operator\">*</span> forward <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> forward<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">remove_from_last</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">remove_n_from_last</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> offset <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>offset<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&#x26;&#x26;</span> i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    offset <span class=\"token operator\">=</span> offset<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    throw <span class=\"token string\">\"LinkedList Overflow: N doesn't exist\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>offset<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    offset <span class=\"token operator\">=</span> offset<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  Node<span class=\"token operator\">*</span> forward <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> forward<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nNode<span class=\"token operator\">*</span> <span class=\"token function\">reverse_list</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> curr <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>curr <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> curr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    curr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n    prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\n    curr <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">middleNode</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> fast <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Middle Node is: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>slow<span class=\"token operator\">-></span>data<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">checkCycle</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> fast <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fast<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>slow <span class=\"token operator\">==</span> fast<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Creating a Linked List</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Creating a LinkedList\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> LinkedList <span class=\"token operator\">=</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Inserting at end</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Inserting at end\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">insert_at_last</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">,</span> new <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">260</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Inserting at first</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Inserting at first\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  LinkedList <span class=\"token operator\">=</span> <span class=\"token function\">insert_at_first</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Inserting after N</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Inserting after n\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">insert_after_n</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">,</span> new <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Removing from last</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Removing from Last\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">remove_from_last</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Removing from n from last in 1Pass</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Removing from n from last\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">remove_n_from_last</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Reversing a LinkedList</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Reversing a LinkedList\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  LinkedList <span class=\"token operator\">=</span> <span class=\"token function\">reverse_list</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// middleNode of LinkedList in 1Pass</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"middleNode of LinkedList in 1Pass\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">middleNode</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Check if List has a cycle</span>\n  Node<span class=\"token operator\">*</span> CyclicList <span class=\"token operator\">=</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> cTemp <span class=\"token operator\">=</span> CyclicList<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cTemp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    cTemp <span class=\"token operator\">=</span> cTemp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cTemp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> CyclicList<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Cycle in List: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token function\">checkCycle</span><span class=\"token punctuation\">(</span>CyclicList<span class=\"token punctuation\">)</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Output</h3>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ clang++-7 -pthread -std<span class=\"token operator\">=</span>c++17 -o main main.cpp\n$ ./main\nCreating a LinkedList\n----------------------------------\n<span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">230</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">250</span>\n----------------------------------\nSize of List is <span class=\"token number\">24</span>\nInserting at end\n----------------------------------\n<span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">230</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">250</span>-<span class=\"token operator\">></span><span class=\"token number\">260</span>\n----------------------------------\nSize of List is <span class=\"token number\">25</span>\nInserting at first\n----------------------------------\n<span class=\"token number\">0</span>-<span class=\"token operator\">></span><span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">230</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">250</span>-<span class=\"token operator\">></span><span class=\"token number\">260</span>\n----------------------------------\nSize of List is <span class=\"token number\">26</span>\nInserting after n\n----------------------------------\n<span class=\"token number\">0</span>-<span class=\"token operator\">></span><span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">99</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">230</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">250</span>-<span class=\"token operator\">></span><span class=\"token number\">260</span>\n----------------------------------\nSize of List is <span class=\"token number\">27</span>\nRemoving from Last\n----------------------------------\n<span class=\"token number\">0</span>-<span class=\"token operator\">></span><span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">99</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">230</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">250</span>\n----------------------------------\nSize of List is <span class=\"token number\">26</span>\nRemoving from n from last\n----------------------------------\n<span class=\"token number\">0</span>-<span class=\"token operator\">></span><span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">99</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">250</span>\n----------------------------------\nSize of List is <span class=\"token number\">25</span>\nReversing a LinkedList\n----------------------------------\n<span class=\"token number\">250</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">99</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">0</span>\n----------------------------------\nSize of List is <span class=\"token number\">25</span>\nmiddleNode of LinkedList <span class=\"token keyword\">in</span> 1Pass\nMiddle Node is: <span class=\"token number\">110</span>\n----------------------------------\n<span class=\"token number\">250</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">99</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">0</span>\n----------------------------------\nSize of List is <span class=\"token number\">25</span>\nCycle <span class=\"token keyword\">in</span> List: <span class=\"token number\">1</span>\n</code></pre></div>\n<h3>Compile Command:</h3>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#For GCC/G++ - Unix</span>\n$ g++ LinkedList.cpp -o LinkedList\n</code></pre></div>\n<h3>Checkout the REPL here: <a href=\"https://replit.com/@PavitraBehre/LinkedListCpp\">LinkedListCPP</a></h3>\n<h3>Github</h3>\n<ul>\n<li>\n<h4>C++: <a href=\"https://github.com/pavitra14/LinkedListCpp\">pavitra14/LinkedListCpp</a></h4>\n</li>\n<li>\n<h4>Python 3: <a href=\"https://github.com/pavitra14/LinkedListPy\">pavitra14/LinkedListPy</a></h4>\n</li>\n</ul>\n","title":"Linked List Implementation and All Operations","date":"2021-04-03","excerpt":"Linked List Data Structure Implementation and Operations in best time complexities"}},"__N_SSG":true}