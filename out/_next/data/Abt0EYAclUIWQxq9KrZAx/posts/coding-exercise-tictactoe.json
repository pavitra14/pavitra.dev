{"pageProps":{"postData":{"id":"coding-exercise-tictactoe","contentHtml":"<h1>TicTacToe - Coding Exercise for Beginners</h1>\n<p>Who doesn't love a litle tictactoe on the back of their notebooks during class/lectures. Using this inspiration, Last year I tried to write my own tictactoe console version when I was preparing for my interviews. In this, It'll be You versus the CPU, catch is, CPU is only random, not any AI (It's a beginners tutorial, AI one will come later)</p>\n<h2>Steps to write a simple TicTacToe Game</h2>\n<p>We'll be using C++ but a Java version is also Available at the end of the post.</p>\n<ul>\n<li>Make a Game Board</li>\n<li>Write a Function to place a piece</li>\n<li>Make it a reusable function by adding pos and user name</li>\n<li>Add a gameOver=false and winner flag</li>\n<li>add a while loop</li>\n<li>add winning conditions of rows, columns, diagonals</li>\n<li>add all winning conditions to a single list</li>\n<li>Loop through that list and check for winners using containAll()</li>\n<li>keep a list of empty blocks as availPos</li>\n<li>write a function for cpu to use only availPos so as no overwriting happens</li>\n<li>Put all the functions together</li>\n</ul>\n<h2>Let's Start</h2>\n<h3>Global Variables and Headers</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;algorithm></span></span>\n\nusing namespace std<span class=\"token punctuation\">;</span>\n\nbool gameOver <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\nstring WinnerName <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&#x3C;</span>vector<span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">>></span> gameBoard<span class=\"token punctuation\">;</span>\n\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> playerPos<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> cpuPos<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> availPos<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Total Functions needed</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">wrongTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">cpuTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Make a Game Board</h3>\n<p>Everyone likes to play TicTacToe on a gameboard, consisting of a grid with 9 playable places.</p>\n<p>Let's make that</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/*</span>\n<span class=\"token comment\">  Shoud Look Like this when print</span>\n<span class=\"token comment\">       | |</span>\n<span class=\"token comment\">      -+-+-</span>\n<span class=\"token comment\">       | |</span>\n<span class=\"token comment\">      -+-+-</span>\n<span class=\"token comment\">       | |</span>\n<span class=\"token comment\">  */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    availPos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  vector<span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">></span> row <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">></span> sep <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&#x3C;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      cout<span class=\"token operator\">&#x3C;&#x3C;</span>gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Write a Function to place a piece</h3>\n<p>Place a piece on the board : Put X or O in the grid</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> symbol<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"X\"</span> <span class=\"token operator\">&#x26;&#x26;</span> gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"O\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">wrongTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Make it a reusable function by adding pos and user name</h3>\n<p>Map the 1-9 range input to appropriate i and j values in the grid so no irregularities are there.</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> string user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> symbol <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token string\">\"Player\"</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">>=</span><span class=\"token number\">1</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">&#x3C;=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Player: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>pos<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n    playerPos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    symbol <span class=\"token operator\">=</span> <span class=\"token string\">'X'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token string\">\"CPU\"</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">>=</span><span class=\"token number\">1</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">&#x3C;=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"CPU: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>pos<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n    cpuPos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    symbol <span class=\"token operator\">=</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>availPos<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    availPos<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>availPos<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Handling Wrong Turns</h3>\n<p>In case someone enters a no. outside the range or enters a grid block which is already taken.</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">wrongTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Invalid Position, Please Try Again\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Trigger User/Player Turns</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Please Enter a Position [1-9]: \"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">;</span>\n  cin<span class=\"token operator\">>></span>pos<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Player\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Trigger CPU Turns - Random but from available/Valid places</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">cpuTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> availPos<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> availPos<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"CPU\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Check for Winner and Halt the Game</h3>\n<p>We're checking the rows, columns and diagonals on each turn. Using hardcoded place values.</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span> v<span class=\"token punctuation\">,</span> string user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>gameOver<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> topRow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> midRow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> botRow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> leftCol <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> midCol <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> rightCol<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> cross1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> cross2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  vector<span class=\"token operator\">&#x3C;</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> winning<span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>topRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>midRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>botRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>leftCol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>midCol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rightCol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cross1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cross2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> winning<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> con <span class=\"token operator\">=</span> winning<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&#x3C;</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> con<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n        c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      gameOver <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n      WinnerName <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>playerPos<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> cpuPos<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    gameOver <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n    WinnerName <span class=\"token operator\">=</span> <span class=\"token string\">\"Draw\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Finally, the main() method to drive everything and indexOf() helper function to get index from Iterator value(STL)</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Welcome to TicTacToe in C++\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gameOver<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>playerPos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Player\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cpuTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>cpuPos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"CPU\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Game Over!\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Winner: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>WinnerName<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> el<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">!=</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>You're final code should look like this:</h2>\n<h2>Main.cpp</h2>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;algorithm></span></span>\n\nusing namespace std<span class=\"token punctuation\">;</span>\n\nbool gameOver <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\nstring WinnerName <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&#x3C;</span>vector<span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">>></span> gameBoard<span class=\"token punctuation\">;</span>\n\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> playerPos<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> cpuPos<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> availPos<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">wrongTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">cpuTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Welcome to TicTacToe in C++\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gameOver<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>playerPos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Player\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cpuTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>cpuPos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"CPU\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Game Over!\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Winner: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>WinnerName<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    availPos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  vector<span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">></span> row <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">></span> sep <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> el<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">!=</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&#x3C;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      cout<span class=\"token operator\">&#x3C;&#x3C;</span>gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> symbol<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"X\"</span> <span class=\"token operator\">&#x26;&#x26;</span> gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"O\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">wrongTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> string user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> symbol <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token string\">\"Player\"</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">>=</span><span class=\"token number\">1</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">&#x3C;=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Player: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>pos<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n    playerPos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    symbol <span class=\"token operator\">=</span> <span class=\"token string\">'X'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token string\">\"CPU\"</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">>=</span><span class=\"token number\">1</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">&#x3C;=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"CPU: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>pos<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n    cpuPos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    symbol <span class=\"token operator\">=</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>availPos<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    availPos<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>availPos<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">wrongTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Invalid Position, Please Try Again\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Please Enter a Position [1-9]: \"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">;</span>\n  cin<span class=\"token operator\">>></span>pos<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Player\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">cpuTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> availPos<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> availPos<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"CPU\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span> v<span class=\"token punctuation\">,</span> string user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>gameOver<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> topRow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> midRow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> botRow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> leftCol <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> midCol <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> rightCol<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> cross1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> cross2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  vector<span class=\"token operator\">&#x3C;</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> winning<span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>topRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>midRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>botRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>leftCol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>midCol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rightCol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cross1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cross2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> winning<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> con <span class=\"token operator\">=</span> winning<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&#x3C;</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> con<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n        c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      gameOver <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n      WinnerName <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>playerPos<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> cpuPos<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    gameOver <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n    WinnerName <span class=\"token operator\">=</span> <span class=\"token string\">\"Draw\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>How to Compile?</h2>\n<p>Use any STL Compatiable C++ compiler. I prefer gcc/g++ 10+</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">g++ main.cpp -o TicTacToe\n</code></pre></div>\n<h2>Run</h2>\n<p>This is for Unix environments(Linux, AWS, MacOS), just run the exe for windows in CMD/Powershell.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">./TicTacToe\n</code></pre></div>\n<h2>References:</h2>\n<ul>\n<li>C++ Code: <a href=\"https://github.com/pavitra14/TicTacToeCPP\">pavitra14/TicTacToeCPP</a></li>\n<li>JAVA Code (with Maven): <a href=\"https://github.com/pavitra14/TicTacToe\">pavitra14/TicTacToe</a></li>\n</ul>\n","title":"Coding Exercise: Writing a CPU Random TicTacToe Game","date":"2021-04-01","excerpt":"Writing a TicTacToe Console Game in C++ and Java - A Coding Exercise for beginners"}},"__N_SSG":true}