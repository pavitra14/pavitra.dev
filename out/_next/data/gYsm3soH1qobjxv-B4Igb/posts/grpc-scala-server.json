{"pageProps":{"postData":{"id":"grpc-scala-server","contentHtml":"<h1>What is RPC?</h1>\n<p><strong>Remote Procedure Call (RPC)</strong> is a powerful technique for constructing <strong>distributed, client-server based applications</strong>. It is based on extending the conventional local procedure calling so that the <strong>called procedure need not exist in the same address space as the calling procedure</strong>.</p>\n<h1>What is gRPC?</h1>\n<img src=\"https://grpc.io/img/landing-2.svg\" alt=\"gRPC Architecture\" />\n<p>gRPC is a modern open source high performance RPC framework developed by Google and Introduced in 2015 that can run in any environment and communicate to any service in any supported language. It used by many major Internet Companies such as Google, Netflix, Cisco, CoreOS, Juniper etc.</p>\n<p>gRPC uses <a href=\"https://developers.google.com/protocol-buffers\">Protocol Buffers</a> as it's Interface Definition Language.</p>\n<h1>Let's get started!</h1>\n<p>I came upon a problem in my work where I was required to use gRPC with Scala. Being a Software Developer, I knew how to do it in Java very well, but for some engineering reasons I was asked to write the same in Scala. Scala being a JVM language makes it very easy to write very efficient code in a very short footprint. The work that takes 500 lines of code in Java can be done easily in &#x3C;100 lines in Scala. Due to lack of documentation from ScalaPB on Streaming Calls, I decided to write my on article on this.</p>\n<h2>Prerequisites</h2>\n<ol>\n<li>Basic knowledge of Scala</li>\n<li>An empty scala project set up with <a href=\"https://scalapb.github.io/docs/\">ScalaPB</a> and <a href=\"https://www.scala-sbt.org/\">SBT</a></li>\n<li>Basic Knowledge of <a href=\"https://developers.google.com/protocol-buffers/docs/overview\">ProtoBufs</a></li>\n</ol>\n<h2>Creating the Protobuf</h2>\n<p>Firstly, we need a proto file containing the messages and a service. We'll create a <strong>HelloWorldProto.proto</strong> file inside <em>src/main/protobuf</em> folder.</p>\n<div class=\"remark-highlight\"><pre class=\"language-protobuf\"><code class=\"language-protobuf\"><span class=\"token keyword\">syntax</span><span class=\"token operator\">=</span><span class=\"token string\">\"proto3\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">package</span> in<span class=\"token punctuation\">.</span>pbehre<span class=\"token punctuation\">.</span>proto<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">message</span> <span class=\"token class-name\">HelloRequest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">string</span> name<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">message</span> <span class=\"token class-name\">HelloResponse</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">string</span> welcome_message<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">service</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">rpc</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloRequest</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloResponse</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">rpc</span> <span class=\"token function\">clientStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">stream</span> <span class=\"token class-name\">HelloRequest</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloResponse</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">rpc</span> <span class=\"token function\">serverStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloRequest</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">stream</span> <span class=\"token class-name\">HelloResponse</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">rpc</span> <span class=\"token function\">streamHello</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">stream</span> <span class=\"token class-name\">HelloRequest</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">stream</span> <span class=\"token class-name\">HelloResponse</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li><em>HelloRequest</em> - Message to be sent as request to the server</li>\n<li><em>HelloResponse</em> - Message to be sent as Response to the client</li>\n<li><em>HelloWorld</em> - gRPC service containing different methods:\n<ul>\n<li><em>sayHello</em> - Unary Call</li>\n<li><em>clientStream</em> - Client Side Streaming</li>\n<li><em>serverStream</em> - Server Side Streaming</li>\n<li><em>streamHello</em> - Bi-Directional Streaming</li>\n</ul>\n</li>\n</ul>\n<h2>Implementing the service - <em>HelloWorld</em></h2>\n<p>Create a new file <strong>HelloService.scala</strong> in <em>src/main/scala/[your package]/</em> with the below content:</p>\n<div class=\"remark-highlight\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">in<span class=\"token punctuation\">.</span>pbehre<span class=\"token punctuation\">.</span>scala</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">in<span class=\"token punctuation\">.</span>pbehre<span class=\"token punctuation\">.</span>proto<span class=\"token punctuation\">.</span></span>HelloWorldProto<span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>grpc<span class=\"token punctuation\">.</span>stub<span class=\"token punctuation\">.</span></span>StreamObserver\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span>Future\n\n<span class=\"token keyword\">class</span> HelloService <span class=\"token keyword\">extends</span> HelloWorldGrpc <span class=\"token punctuation\">.</span>HelloWorld <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//Service to implement calls</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>This is the basic service structure, needs to extend the HelloWorldGrpc.HelloWorld Base Implementation Class. Let's go ahead and override the methods</p>\n<h3>Unary Call - sayHello</h3>\n<p>This call takes a single <em>HelloRequest</em> Object and Returns a <em>Future</em> with <em>HelloResponse</em> Object.</p>\n<div class=\"remark-highlight\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> sayHello<span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> name <span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>name\n    <span class=\"token keyword\">val</span> reply <span class=\"token operator\">=</span> HelloResponse<span class=\"token punctuation\">(</span>welcomeMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"Welcome, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span>\n    Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Client Side Streaming - clientStream</h3>\n<p>This will take a stream of objects from the client in a request observer, and then return them back to the client once the stream is end/committed in a single <em>HelloResponse</em> Object. Only one request session is used to stream content to the server.</p>\n<div class=\"remark-highlight\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> clientStream<span class=\"token punctuation\">(</span>responseObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> count<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> names<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">val</span> requestObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onNext<span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Received request: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        names<span class=\"token operator\">+=</span> value<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onError<span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        responseObserver<span class=\"token punctuation\">.</span>onNext<span class=\"token punctuation\">(</span>HelloResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome, \"</span> <span class=\"token operator\">+</span> names <span class=\"token operator\">+</span> <span class=\"token string\">\"\\nTotal Count: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        responseObserver<span class=\"token punctuation\">.</span>onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"clientStream::onCompleted()\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    requestObserver\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Server Side Streaming - serverStream</h3>\n<p>Will take a single request <em>HelloRequest</em> object which will establish the request and thanks to http2.0, the grpc function will return a multiple stream of <em>HelloResponse</em> object in the same request.</p>\n<div class=\"remark-highlight\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> serverStream<span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">,</span> responseObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> values <span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"First Stream packet\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Second stream packet\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Third Stream packet\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Fourth Stream packet\"</span>\n    <span class=\"token punctuation\">)</span>\n    values<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>s <span class=\"token keyword\">=></span> responseObserver<span class=\"token punctuation\">.</span>onNext<span class=\"token punctuation\">(</span>HelloResponse<span class=\"token punctuation\">(</span>welcomeMessage <span class=\"token operator\">=</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    responseObserver<span class=\"token punctuation\">.</span>onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Bi-Directional Streaming - streamHello</h3>\n<p>Takes a stream of <em>HelloRequest</em> Objects and returns a stream of <em>HelloResponse</em> objects</p>\n<div class=\"remark-highlight\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> streamHello<span class=\"token punctuation\">(</span>responseObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> requestObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onNext<span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Received a Request: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        responseObserver<span class=\"token punctuation\">.</span>onNext<span class=\"token punctuation\">(</span>HelloResponse<span class=\"token punctuation\">(</span>welcomeMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World, \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onError<span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Service completed\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    requestObserver\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4>That's it!</h4>\n<h4>Your final file service file should look like:</h4>\n<div class=\"remark-highlight\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">in<span class=\"token punctuation\">.</span>pbehre<span class=\"token punctuation\">.</span>scala</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">in<span class=\"token punctuation\">.</span>pbehre<span class=\"token punctuation\">.</span>proto<span class=\"token punctuation\">.</span></span>HelloWorldProto<span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>grpc<span class=\"token punctuation\">.</span>stub<span class=\"token punctuation\">.</span></span>StreamObserver\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span>Future\n\n<span class=\"token keyword\">class</span> HelloService <span class=\"token keyword\">extends</span> HelloWorldGrpc <span class=\"token punctuation\">.</span>HelloWorld <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> sayHello<span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> name <span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>name\n    <span class=\"token keyword\">val</span> reply <span class=\"token operator\">=</span> HelloResponse<span class=\"token punctuation\">(</span>welcomeMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"Welcome, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span>\n    Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> streamHello<span class=\"token punctuation\">(</span>responseObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> requestObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onNext<span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Received a Request: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        responseObserver<span class=\"token punctuation\">.</span>onNext<span class=\"token punctuation\">(</span>HelloResponse<span class=\"token punctuation\">(</span>welcomeMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World, \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onError<span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Service completed\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    requestObserver\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> clientStream<span class=\"token punctuation\">(</span>responseObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> count<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> names<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">val</span> requestObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onNext<span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Received request: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        names<span class=\"token operator\">+=</span> value<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onError<span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        responseObserver<span class=\"token punctuation\">.</span>onNext<span class=\"token punctuation\">(</span>HelloResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome, \"</span> <span class=\"token operator\">+</span> names <span class=\"token operator\">+</span> <span class=\"token string\">\"\\nTotal Count: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        responseObserver<span class=\"token punctuation\">.</span>onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"clientStream::onCompleted()\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    requestObserver\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> serverStream<span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">,</span> responseObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> values <span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"First Stream packet\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Second stream packet\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Third Stream packet\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Fourth Stream packet\"</span>\n    <span class=\"token punctuation\">)</span>\n\n    values<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>s <span class=\"token keyword\">=></span> responseObserver<span class=\"token punctuation\">.</span>onNext<span class=\"token punctuation\">(</span>HelloResponse<span class=\"token punctuation\">(</span>welcomeMessage <span class=\"token operator\">=</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    responseObserver<span class=\"token punctuation\">.</span>onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4></h4>\n<h2>Implementing the GRPC Server</h2>\n<p>Create a new file <strong>HelloServer.scala</strong> in <em>src/main/scala/[your package]/</em> with the below content:</p>\n<div class=\"remark-highlight\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">in<span class=\"token punctuation\">.</span>pbehre<span class=\"token punctuation\">.</span>scala</span>\n\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">in<span class=\"token punctuation\">.</span>pbehre<span class=\"token punctuation\">.</span>proto<span class=\"token punctuation\">.</span></span>HelloWorldProto<span class=\"token punctuation\">.</span>_\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>grpc<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">{</span>Server<span class=\"token punctuation\">,</span> ServerBuilder<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">{</span>LogManager<span class=\"token punctuation\">,</span> Logger<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span>ExecutionContext\n\n<span class=\"token keyword\">object</span> App <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> logger<span class=\"token operator\">:</span> Logger <span class=\"token operator\">=</span> Logger<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span>classOf<span class=\"token punctuation\">[</span>App<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> port <span class=\"token operator\">=</span> <span class=\"token number\">50051</span>\n\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> HelloWorldServer<span class=\"token punctuation\">(</span>ExecutionContext<span class=\"token punctuation\">.</span>global<span class=\"token punctuation\">)</span>\n    server<span class=\"token punctuation\">.</span>start\n    server<span class=\"token punctuation\">.</span>blockUntilShutdown\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> HelloWorldServer<span class=\"token punctuation\">(</span>executionContext<span class=\"token operator\">:</span> ExecutionContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">self</span> <span class=\"token keyword\">=></span>\n  <span class=\"token keyword\">private</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">var</span> server<span class=\"token operator\">:</span> Server <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token keyword\">def</span> start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    server <span class=\"token operator\">=</span> ServerBuilder\n      <span class=\"token punctuation\">.</span>forPort<span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>addService<span class=\"token punctuation\">(</span>HelloWorldGrpc<span class=\"token punctuation\">.</span>bindService<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> HelloService<span class=\"token punctuation\">,</span> executionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    App<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting server on port: \"</span> <span class=\"token operator\">+</span> App<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>addShutdownHook <span class=\"token punctuation\">{</span>\n      System<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">(</span><span class=\"token string\">\"*** shutting down gRPC server since JVM is shutting down\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      System<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">(</span><span class=\"token string\">\"*** server shut down\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">def</span> stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>server <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      server<span class=\"token punctuation\">.</span>shutdown<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">def</span> blockUntilShutdown<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>server <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      server<span class=\"token punctuation\">.</span>awaitTermination<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4>That's it! You're done with the code.</h4>\n<p>Client Implementation coming soon!</p>\n<p>You can find the code and a sample project in this repository: <a href=\"https://github.com/pavitra14/grpc_hello_server\">Github</a></p>\n","title":"Using gRPC with Scala - Server Implementation","date":"2021-03-27","excerpt":"Handling Unary, Client Side Streaming, Server Side Streaming and Bi-Directional Streaming Calls in gRPC using Scala"}},"__N_SSG":true}