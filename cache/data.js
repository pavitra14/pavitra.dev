export const cache = {"postData":{"automate-mouse":{"id":"automate-mouse","contentHtml":"<h2>Automating Mouse Cursor</h2>\n<p><em><strong>Disclaimer: I'm writing this post just for educational purposes and I do not support Time Theft. I think automation is pretty cool so that's why I make such stuff.</strong></em></p>\n<p>We're gonna use the library <em>pyautogui</em> to automate our cursor.</p>\n<p>So let's start!</p>\n<h2>Installing the pyautogui Module</h2>\n<p>The <code>pyautogui</code> module can send virtual keypresses and mouse clicks to Windows, OS X, and Linux. Depending on which operating system you’re using, you may have to install some other modules (called <em>dependencies</em>) before you can install PyAutoGUI.</p>\n<ul>\n<li>On Windows, there are no other modules to install.</li>\n<li>On OS X, run <strong><code>sudo pip3 install pyobjc-framework-Quartz</code></strong>, <strong><code>sudo pip3 install pyobjc-core</code></strong>, and then <strong><code>sudo pip3 install pyobjc</code></strong>.</li>\n<li>On Linux, run <strong><code>sudo pip3 install python3-xlib</code></strong>, <strong><code>sudo apt-get install scrot</code></strong>, <strong><code>sudo apt-get install python3-tk</code></strong>, and <strong><code>sudo apt-get install python3-dev</code></strong>. (Scrot is a screenshot program that PyAutoGUI uses.)</li>\n</ul>\n<p>After these dependencies are installed, run <strong><code>pip install pyautogui</code></strong> (or <strong><code>pip3</code></strong> on OS X and Linux) to install PyAutoGUI.</p>\n<p>Before we start our script, we need to make sure it doesn't get out of control and you don't have to deal with such issues.\nSo We'll be using some fail safes.</p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pyautogui\npyautogui<span class=\"token punctuation\">.</span>PAUSE <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\npyautogui<span class=\"token punctuation\">.</span>FAILSAFE <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n</code></pre></div>\n<p>Here we import <code>pyautogui</code> and set <code>pyautogui.PAUSE</code> to <code>1</code> for a one-second pause after each function call. We set <code>pyautogui.FAILSAFE</code> to <code>True</code> to enable the fail-safe feature.</p>\n<h2>Controlling Mouse Movement</h2>\n<p><img src=\"https://automatetheboringstuff.com/images/000011.jpg\" alt=\"Ref: Automate the Boring Stuff - Screen Coordinates\"></p>\n<p>Your <em>resolution</em> is how many pixels wide and tall your screen is. If your screen’s resolution is set to 1920×1080, then the coordinate for the upper-left corner will be (0, 0), and the coordinate for the bottom-right corner will be (1919, 1079).</p>\n<p>The <code>pyautogui.size()</code> function returns a two-integer tuple of the screen’s width and height in pixels. Enter the following into the interactive shell:</p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pyautogui\npyautogui<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1920</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1080</span><span class=\"token punctuation\">)</span>\nwidth<span class=\"token punctuation\">,</span> height <span class=\"token operator\">=</span> pyautogui<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h2>That's enough for basics.</h2>\n<p>Let's write our code.</p>\n<h4>Include the dependencies</h4>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pyautogui\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n<span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> randint\n</code></pre></div>\n<h4>Globals and failsafes</h4>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\">pyautogui<span class=\"token punctuation\">.</span>PAUSE <span class=\"token operator\">=</span> <span class=\"token number\">1.5</span>\npyautogui<span class=\"token punctuation\">.</span>FAILSAGE <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\nscreen_width <span class=\"token punctuation\">,</span> screen_height <span class=\"token operator\">=</span> pyautogui<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h4>Function to get the next random position for your mouse cursor.</h4>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">getNextPos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x <span class=\"token operator\">=</span> randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> screen_width <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    y <span class=\"token operator\">=</span> randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> screen_height <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token punctuation\">,</span> y\n</code></pre></div>\n<h4>Function to move the mouse cursor and sleep for 1 second.</h4>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x<span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> getNextPos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Moving to ({},{})\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    pyautogui<span class=\"token punctuation\">.</span>moveTo<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span> duration<span class=\"token operator\">=</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h4>Finally, the entry point</h4>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Press CTRL-C to Stop\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3>Complete code looks like this</h3>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pyautogui\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n<span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> randint\n\n\npyautogui<span class=\"token punctuation\">.</span>PAUSE <span class=\"token operator\">=</span> <span class=\"token number\">1.5</span>\npyautogui<span class=\"token punctuation\">.</span>FAILSAGE <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\nscreen_width <span class=\"token punctuation\">,</span> screen_height <span class=\"token operator\">=</span> pyautogui<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">getNextPos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x <span class=\"token operator\">=</span> randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> screen_width <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    y <span class=\"token operator\">=</span> randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> screen_height <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token punctuation\">,</span> y\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x<span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> getNextPos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Moving to ({},{})\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    pyautogui<span class=\"token punctuation\">.</span>moveTo<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span> duration<span class=\"token operator\">=</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Press CTRL-C to Stop\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h4>Run it using</h4>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">python automate.py\n</code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://automatetheboringstuff.com/chapter18/\">Automate the Boring Stuff - Article/Chapter</a></li>\n<li><a href=\"https://github.com/pavitra14/AutomateMouseCursor\">Github Link</a></li>\n</ul>\n","title":"Automate Mouse Cursor Randomly via Python","date":"2021-06-27","excerpt":"Automate your desktop cursor using Python in Less than 20 lines your code. Useful to always appear online in office applications :v"},"cisco-ideathon-2020-journey":{"id":"cisco-ideathon-2020-journey","contentHtml":"<p><img src=\"https://i.imgur.com/07AoFXc.jpg\" alt=\"Cisco Ideathon (Pic from Cisco Resonance 2nd Edition)\"></p>\n<h2>What is Cisco Ideathon?</h2>\n<blockquote>\n<h4><em>Between dreams and reality, there is a bridge.</em></h4>\n</blockquote>\n<p><a href=\"https://www.cisco.com\">Cisco</a> Ideathon is an annual flagship hiring programme from Cisco, to hire the best and the most diverse talent from across all demographics of the country. Currently it's only available to registered <a href=\"https://www.netacad.com\">Cisco Networking Academies</a>.</p>\n<p>The Cisco Ideathon is an opportunity for students with potential and creativity to be a part of Cisco’s technological innovations. In simpler words, Cisco Ideathon is a great opportunity for students from non-Ivy league universities to showcase their skill and expertise, and get a chance to get shortlisted and Intern at one of the biggest IT Companies in the world.</p>\n<p>Did you know that after San Jose, CA, Cisco has there biggest development center in Bangalore, India. Via Ideathon, You may get a chance to work there.</p>\n<h1>How to clear Cisco Ideathon?</h1>\n<p>I would be lying if I said clearing Ideathon is easy. It's not! But don't let that bring you down, No matter the difficulty level, it's surely fun to participate and learn. I haven't learned at this pace in whole my university period than in these 3 months of competition duration.</p>\n<p>You need dedication, determination and a whole lot of caffeine☕ to go through this, but I can assure you it's the event of a lifetime.</p>\n<p>So buckle up, you're in for a ride!</p>\n<h2>Prerequisites:</h2>\n<ul>\n<li>\n<p>Enrolled in Cisco NetAcad</p>\n</li>\n<li>\n<p>Good DSA and Domain Knowledge</p>\n</li>\n<li>\n<p>NetAcad Course Certifications (Not just copy paste, You should be well versed in it too😏):</p>\n<ul>\n<li>\n<p>CCNAv7: Introduction to Network</p>\n</li>\n<li>\n<p>CCNAv7: Switching, Routing &#x26; Wireless Essentials</p>\n</li>\n<li>\n<p>Networking Essentials</p>\n</li>\n<li>\n<p>Get Connected</p>\n</li>\n<li>\n<p>PCAP: Programming with Python</p>\n</li>\n<li>\n<p>C/C++ Equivalent Course.</p>\n</li>\n</ul>\n<p><em>Not all courses are mandatory but it's highly recommended that you do them all</em></p>\n</li>\n<li>\n<p>Coding Skills (Duh!)</p>\n</li>\n<li>\n<p>Internet Connection 😐</p>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/rSKdjTH.png\" alt=\"Contest Journey\"></p>\n<h2>How to prepare?</h2>\n<p>Alot of people ask me this question on a daily basis, so I planned to write this blog, One time hassle only😂. There's alot of ways you can prepare. Some people prefer tutors, some prefer books, some prefer YouTube and some hand written notes.\nI'm more of a hand written and Youtube kinda person.</p>\n<p>I'm not much of a reader, be it books or any course content, I prefer practical approaches more than just theory (not just in this case but everywhere). When it comes to notes, I prefer writing my own in my own way so I can understand them better and they later serve as a revision copy as well. CCNA is VAAAAST, so if you're planning to go for CCNA from youtube, there's a very high chance that you'll end up just getting confused and distracted. My suggestion and what I did was: Go through the NetAcad Course Content first, then use the topic headings and concepts from netacad, individually watch videos on them from YouTube (any youtube channel will work as long as you are getting it in) and simultaneously take notes. <strong>TAKE NOTES!</strong> I can't stress this enough. You cannot learn networking just by watching videos and reading content, you need to make sure you are absorbing all the details and getting enough hands on practice. The ratio should by 1:1 for Studying:Practicing.</p>\n<p>The perfect tool for practicing networking concepts is by using Cisco Packet Tracer, another just awesome tool made available to NetAcad enrolled students. Create, Simulate, Observe. These 3 steps are most important in learning networking.</p>\n<p>Also, don't just give all your time into just networking, give enough time to other subjects as well, DSA, Operating Systems, DBMS, Internet &#x26; Web Technologies, Cyber Security, Object Oriented Programming, C/C++, Python, Java etc.</p>\n<h3>Registration</h3>\n<p>Registration usually starts by 3rd week of August every year, your netacad instructor will inform you about that asap.</p>\n<h3>Round 1: Quiz (Knockout round)</h3>\n<p>Probably one of the most important round, as major shortlisting is done here. You get 26 questions based on Dry Run Codes, CCNA, OS, DBMS, IWT, Cyber Security and some networking problems which you'll need to solve. It's a proctored examination so you gotta do it alone. If you made it through this round, Other rounds are fairly easy and less competetive.</p>\n<h3>Round 2A: Video Submission (Knockout round)</h3>\n<p>This is the round where you'll see the spirit of Ideathon. Also known as the \"<em>Ideation</em>\" round. You're given three problem statements, each one completely different from the other and unique in their own way. You're required to Analyse, Research and Come up with a solution for any one of them using 5G or any other latest technologies. Your solution should be unique, innovative, scalable and feasible to implement. Here's the catch, you only have <strong>90 seconds</strong> to do all that! Not one second less, Not one second more. Exact 90seconds. It should be well shot, well edited, well rendered and should contain enough research to make your solution viable. You get approximately 4-6 days to complete everything and upload. Always upload atleast a day before the deadline to avoid any issues.</p>\n<p><em>I'm not sure if we're allowed to share our videos, but will update this in future if any update is there.</em></p>\n<h3>Round 2B: Competency Assessment Test (Not a Knockout round)</h3>\n<p>As the name suggests, this assessment is to evaluate your competency in a high pressured work environment. Contains general aptitude and pyschological questions</p>\n<h3>Round 3: UR Test (Knockout round)</h3>\n<p>UR stands for University Recruitment. Thus, if you made it till here, Congratulations, you've cleared Ideathon and now you're on the track for University Recruitment. The path only gets more and more difficult from here on. You need to clear this test to proceed to the interviews. UR Test contains 26 questions, were 25 are MCQs from DSA, DBMS, CCNA, Cyber Security and other domain subjects and 1 competetive coding question. Before attempting the UR Test, they ask you to fill your preference for Job roles. In Ideathon 2020, there were Software Engineer - Engineering, Software Engineer - IT, Consulting Engineer - CX, Business Analyst and Site Reliability Engineer roles. Based on your performance in this test, you'll be given the roles. It's like an unsaid thing but if you want the SE roles, <strong>SOLVE THE CODING QUESTION</strong></p>\n<h3>Round 4: Technical Interview (Knockout round)</h3>\n<p>As the name suggests, You're called for a Technical Interview, which can be virtual or on-site, depends on the situations. A panel of three will conduct that and will ask you questions based on your resume and role. Make sure to prepare well and answer confidently.</p>\n<h3>Round 5: Managerial Interview (Knockout round)</h3>\n<p>They'll ask you questions and some situations, how you will handle them and how can you improve them. You answer should be original as the interview is alot more experienced than you are, thus they know when you're saying the words from the internet. Be original, Be Confident</p>\n<h3>Round 6: HR Interview (Knockout round)</h3>\n<p>Do not believe in hearsay that you cannot get rejected in HR round! This round is as important as any other. They check your communication skills, confidence and your ability to handle things. You'll be told your offer CTC in this round so listen carefully too!</p>\n<h3>There's no Round 7</h3>\n<p>You're done and in a few days you'll get your result. Congratulations and all the best!</p>\n<p>At the time of writing this article, I'm currently a Software Engineer Intern @ Cisco System (India) Pvt. Ltd. See you there.</p>\n<img src=\"https://i.imgur.com/ieNZBMg.jpg\" alt=\"Cisco Day One\" style=\"zoom:50%;\" />\n<h5>References:</h5>\n<ul>\n<li>\n<p><a href=\"https://www.netacad.com\">NetAcad</a></p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=n2D1o-aM-2s&#x26;list=PLh94XVT4dq02frQRRZBHzvj2hwuhzSByN\">Full Series | 200-301 CCNA | Free Cisco Video Training 2020 | Networking Inc.</a></p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\">Data Structures</a></p>\n</li>\n</ul>\n","title":"My Cisco Ideathon 2020 Journey","date":"2021-03-28","excerpt":"How I prepared for Cisco Ideathon 2020 and How to prepare for Ideathon 2021"},"coding-exercise-tictactoe":{"id":"coding-exercise-tictactoe","contentHtml":"<h2>TicTacToe - Coding Exercise for Beginners</h2>\n<p>Who doesn't love a litle tictactoe on the back of their notebooks during class/lectures. Using this inspiration, Last year I tried to write my own tictactoe console version when I was preparing for my interviews. In this, It'll be You versus the CPU, catch is, CPU is only random, not any AI (It's a beginners tutorial, AI one will come later)</p>\n<h2>Steps to write a simple TicTacToe Game</h2>\n<p>We'll be using C++ but a Java version is also Available at the end of the post.</p>\n<ul>\n<li>Make a Game Board</li>\n<li>Write a Function to place a piece</li>\n<li>Make it a reusable function by adding pos and user name</li>\n<li>Add a gameOver=false and winner flag</li>\n<li>add a while loop</li>\n<li>add winning conditions of rows, columns, diagonals</li>\n<li>add all winning conditions to a single list</li>\n<li>Loop through that list and check for winners using containAll()</li>\n<li>keep a list of empty blocks as availPos</li>\n<li>write a function for cpu to use only availPos so as no overwriting happens</li>\n<li>Put all the functions together</li>\n</ul>\n<h2>Let's Start</h2>\n<h3>Global Variables and Headers</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;algorithm></span></span>\n\nusing namespace std<span class=\"token punctuation\">;</span>\n\nbool gameOver <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\nstring WinnerName <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&#x3C;</span>vector<span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">>></span> gameBoard<span class=\"token punctuation\">;</span>\n\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> playerPos<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> cpuPos<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> availPos<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Total Functions needed</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">wrongTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">cpuTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Make a Game Board</h3>\n<p>Everyone likes to play TicTacToe on a gameboard, consisting of a grid with 9 playable places.</p>\n<p>Let's make that</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/*</span>\n<span class=\"token comment\">  Shoud Look Like this when print</span>\n<span class=\"token comment\">       | |</span>\n<span class=\"token comment\">      -+-+-</span>\n<span class=\"token comment\">       | |</span>\n<span class=\"token comment\">      -+-+-</span>\n<span class=\"token comment\">       | |</span>\n<span class=\"token comment\">  */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    availPos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  vector<span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">></span> row <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">></span> sep <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&#x3C;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      cout<span class=\"token operator\">&#x3C;&#x3C;</span>gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Write a Function to place a piece</h3>\n<p>Place a piece on the board : Put X or O in the grid</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> symbol<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"X\"</span> <span class=\"token operator\">&#x26;&#x26;</span> gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"O\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">wrongTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Make it a reusable function by adding pos and user name</h3>\n<p>Map the 1-9 range input to appropriate i and j values in the grid so no irregularities are there.</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> string user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> symbol <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token string\">\"Player\"</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">>=</span><span class=\"token number\">1</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">&#x3C;=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Player: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>pos<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n    playerPos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    symbol <span class=\"token operator\">=</span> <span class=\"token string\">'X'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token string\">\"CPU\"</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">>=</span><span class=\"token number\">1</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">&#x3C;=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"CPU: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>pos<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n    cpuPos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    symbol <span class=\"token operator\">=</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>availPos<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    availPos<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>availPos<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Handling Wrong Turns</h3>\n<p>In case someone enters a no. outside the range or enters a grid block which is already taken.</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">wrongTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Invalid Position, Please Try Again\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Trigger User/Player Turns</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Please Enter a Position [1-9]: \"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">;</span>\n  cin<span class=\"token operator\">>></span>pos<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Player\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Trigger CPU Turns - Random but from available/Valid places</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">cpuTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> availPos<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> availPos<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"CPU\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Check for Winner and Halt the Game</h3>\n<p>We're checking the rows, columns and diagonals on each turn. Using hardcoded place values.</p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span> v<span class=\"token punctuation\">,</span> string user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>gameOver<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> topRow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> midRow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> botRow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> leftCol <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> midCol <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> rightCol<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> cross1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> cross2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  vector<span class=\"token operator\">&#x3C;</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> winning<span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>topRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>midRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>botRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>leftCol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>midCol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rightCol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cross1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cross2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> winning<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> con <span class=\"token operator\">=</span> winning<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&#x3C;</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> con<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n        c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      gameOver <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n      WinnerName <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>playerPos<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> cpuPos<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    gameOver <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n    WinnerName <span class=\"token operator\">=</span> <span class=\"token string\">\"Draw\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Finally, the main() method to drive everything and indexOf() helper function to get index from Iterator value(STL)</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Welcome to TicTacToe in C++\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gameOver<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>playerPos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Player\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cpuTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>cpuPos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"CPU\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Game Over!\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Winner: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>WinnerName<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> el<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">!=</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>You're final code should look like this:</h2>\n<h2>Main.cpp</h2>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;algorithm></span></span>\n\nusing namespace std<span class=\"token punctuation\">;</span>\n\nbool gameOver <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\nstring WinnerName <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&#x3C;</span>vector<span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">>></span> gameBoard<span class=\"token punctuation\">;</span>\n\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> playerPos<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> cpuPos<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> availPos<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">wrongTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">cpuTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Welcome to TicTacToe in C++\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gameOver<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>playerPos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Player\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cpuTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>cpuPos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"CPU\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Game Over!\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Winner: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>WinnerName<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    availPos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  vector<span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">></span> row <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span>string<span class=\"token operator\">></span> sep <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gameBoard<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> el<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">!=</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printGameBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&#x3C;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      cout<span class=\"token operator\">&#x3C;&#x3C;</span>gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> symbol<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"X\"</span> <span class=\"token operator\">&#x26;&#x26;</span> gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"O\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    gameBoard<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">wrongTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> string user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> symbol <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token string\">\"Player\"</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">>=</span><span class=\"token number\">1</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">&#x3C;=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Player: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>pos<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n    playerPos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    symbol <span class=\"token operator\">=</span> <span class=\"token string\">'X'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token string\">\"CPU\"</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">>=</span><span class=\"token number\">1</span> <span class=\"token operator\">&#x26;&#x26;</span> pos<span class=\"token operator\">&#x3C;=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"CPU: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>pos<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n    cpuPos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    symbol <span class=\"token operator\">=</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>availPos<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    availPos<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>availPos<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">_place</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">wrongTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Invalid Position, Please Try Again\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">playerTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Please Enter a Position [1-9]: \"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">;</span>\n  cin<span class=\"token operator\">>></span>pos<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Player\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">cpuTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> availPos<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> availPos<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">placePeice</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> <span class=\"token string\">\"CPU\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">checkWinner</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span> v<span class=\"token punctuation\">,</span> string user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>gameOver<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> topRow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> midRow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> botRow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> leftCol <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> midCol <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> rightCol<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> cross1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> cross2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  vector<span class=\"token operator\">&#x3C;</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> winning<span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>topRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>midRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>botRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>leftCol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>midCol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rightCol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cross1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  winning<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cross2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> winning<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> con <span class=\"token operator\">=</span> winning<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&#x3C;</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> con<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n        c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      gameOver <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n      WinnerName <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>playerPos<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> cpuPos<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    gameOver <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n    WinnerName <span class=\"token operator\">=</span> <span class=\"token string\">\"Draw\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>How to Compile?</h2>\n<p>Use any STL Compatiable C++ compiler. I prefer gcc/g++ 10+</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">g++ main.cpp -o TicTacToe\n</code></pre></div>\n<h2>Run</h2>\n<p>This is for Unix environments(Linux, AWS, MacOS), just run the exe for windows in CMD/Powershell.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">./TicTacToe\n</code></pre></div>\n<h2>References:</h2>\n<ul>\n<li>C++ Code: <a href=\"https://github.com/pavitra14/TicTacToeCPP\">pavitra14/TicTacToeCPP</a></li>\n<li>JAVA Code (with Maven): <a href=\"https://github.com/pavitra14/TicTacToe\">pavitra14/TicTacToe</a></li>\n</ul>\n","title":"Coding Exercise: Writing a CPU Random TicTacToe Game","date":"2021-04-01","excerpt":"Writing a TicTacToe Console Game in C++ and Java - A Coding Exercise for beginners"},"from-tier3-to-faang":{"id":"from-tier3-to-faang","contentHtml":"<p><img src=\"https://i.imgflip.com/61d0hh.jpg\" alt=\"With a great JEE score, comes a great headache\"></p>\n<p>Frankly speaking, I never was any good at JEE. I scored an awesome score of <strong>31/360</strong> and I'm very proud of it. This image may offend alot of people but I have no regrets.</p>\n<p><em>Note : This is more of a personal blog than a preparation guide.</em></p>\n<h3>Preface (or most likely an intro on what to expect out of this)</h3>\n<blockquote>\n<p>This is a caffiene fueled article and I'm pretty sure nothing is gonna make sense but still why not do it.</p>\n</blockquote>\n<p>I did waste 2 years of my life going to JEE preparation institutes like most science students in the country but I was lucky enough to realise 2 days before my JEE that I cannot follow the rat race of just getting a good score and getting any branch just for the sake of the college name.</p>\n<p>Ironically, It doesn't matter which college you're from or what your score in the above said exam is, it all depends on your own perseverance and determination (and also having atleast a normal functioning brain, also known as common sense).</p>\n<p>I actually started to write this blog on 6th September 2021 but I'm not sure when (or ever) it'll be complete. That simply put, is how adult life is, sadly. Alot of students and juniors and linkedin connections reached out to me to share my interview experience, what I believe is getting a good job is much more than just an interview experience, it's a whole journey of preparation and experiences throughout a candidate's life which helps him. So sorry for the cliche if you're here just for the interview preparation guide or the experience or just asking the questions that were asked (Which I anyway cannot reveal for legal reasons).</p>\n<p>I mostly intend to cover my journey from being a small town college student to an engineer in a FAANG.I'll try to cover as much things as I can, since my time is limited I may skip over a few things but feel free to reach out on LinkedIn.</p>\n<h3>School Life (and does it really matter?)</h3>\n<p>I was never really a very good academic (or social for that matter) student in school, if you ask anyone from my school batch you'll only here one thing, that \"Oh yeah there was a guy but he never used to talk to anyone and just lurks in the corner.\". That's entirely true tbh. I never was a very active student, used to spend most of my time in computer labs and just wreaking havoc there. I always just wanted to do what I enjoyed, thus I started out quite early. At first, I was fascinated by all electronics and used to play around with alot of circuits (needless to say, I got shocked alot), It was around 5th Standard that Internet intrigued me. I started studying html and web basics using borrowed books at that time. We had a 128kbps BSNL connection and god knows how fast it was. Two years I tried to do basic web dev then started out with PHP in 7th standard and was freelenacing by 8th.</p>\n<p>I had no knowledge of what data structures are, what control structures are and all the mumbo jumbo. All I knew was if I write this I'll get the output, so you can say that was mostly street knowledge. But still, I believe freelancing gives you alot of necessary exposure and experience on how software is written. I freelanced for a couple of years before being forced to drop it all because of 10+2 constraints. I lost all practice and touch for 2 years.</p>\n<p>Fast forward to JEE, a day before the actual exam I decided <code>Nahi ho payega</code> and just screwed the paper intentionally. Ironically, I calculated getting 18/360 using the answer keys available online, but when the actual result came, i scored 31/360 and trust me I was soo happy that I even got that score, considering how I botched the exam. Looking back right now, I have absolutely no regrets on my decisions and my score. It's just a proof that JEE cannot decide your future, it's merely a tool for manipulating students to run the rat race. I've known non science people also getting great tech jobs, so yeah, this all does not matter. Be it a Ivy League expensive af school or a moderate or a state governed school, it has no role to play in what you can and cannot do in life. It's your environment that shapes you. The people around you contribute alot in shaping your personality, so make sure you surround yourself with the right crowd.</p>\n<h3>Choice of College (and was it a right decision?)</h3>\n<p>Ironically, I chose a Tier 3 / Private College in my hometown on purpose. I had a good score in my 10+2 Board exams (I still don't know how it happened) so I got offers from many prestigious Private universities with scholarships. The catch with them is that the scholarship is only for the first year, you still have to spend lakhs of rupees for rest 3 years unless you plan to drop out (Lol, like Indian Parents would actually support that). So I thought why to spend literally millions of rupees on a college when the oppurtunities at the end of degree are gonna be the same  regardless of college. So I just went ahead and decided to join a college in my home town. Easy commute and I saved literally a ton of money on alot of facilities.</p>\n<p>During my admission time, Alot of my relatives tried to sway my parents that I'm ruining my future by choosing a same city private college, ironically they stopped calling when I got placed :v . Even my parents were conscious of my decision but they had no option but to support me (31/360 did help me here). Somewhere I also knew that it's gonna be difficult but I was like <code>Dekha jayega</code></p>\n<p>I have no regrets in any decisions I made. My College turned out to be one of the best decisions I ever made. The faculty immediately understood my needs and potential and they supported my throughout my college period. I had the best class incharge and head of department in terms support. Frankly, I wouldn't be where I am right now if I chose any other college. Being a private college in my own city, gave me alot of times to work on my skills and explore more things. I met a bunch of interesting people (they know who they are), got into alot of trouble, both in personal life (That's right dear, I made it, on my own if I may add) as well as academically (Well, attendance and I never really was in any classes). But it is like what they say, You got through a major personality change in college, and it only makes you a better human being.</p>\n<h3>Being an average student (and getting a dream job)</h3>\n<p><img src=\"https://i.imgflip.com/5skytc.jpg\" alt=\"It&#x27;s not as easy as it seems\"></p>\n<p>(If only it was that easy, but seriously, I don't understand how <em>Mitochondria is the power house of the cell</em> ever helped me)</p>\n<p>For an average student, It's not easy. You have to cover alot of ground. I only had a GPA of 8.6, that too the pandemic had a major role in that.</p>\n<h4>first year</h4>\n<p>It was probably the best time throughout my college journey, I met a whole new company of people, made alot of friends, saw how the world works, I experienced that type of independence for the first time. I did nothing but enjoy in my first year, and also a small 15 day internship with VidTold. It was not a tech internship but more of a multimedia thing. I was working on animation and video editing. At that stage, I was still figuring out what I want to do as a career so was just exploring things.</p>\n<h4>second year</h4>\n<p>Ah, this year was one which made me realise in how much water I am in. I led my first team in Grand Finale of Smart India Hackathon 2019 in Pune. We had a great product and pitch deck but a small tech glitch in my laptop config (idk why my ubuntu settings stopped responding) 10mins before the finale pitch ruined it all. We had a somewhat a great team and we enjoyed alot but still, i regret losing that. After coming out of that thing, I did participate in Codevita that year, only to fail very very badly. That's when I realised I did not know anything at all! I couldnt solve even the easiest question there is. I took that failure quite hard and started studying DSA religiously. I also started as a Backend Developer Intern at Recooty, which ultimately made me grow as a developer and taught me alot on how to scale and how shitty my code was before that.</p>\n<h4>third year</h4>\n<p>Thanks to last years' experience, I cracked Codevita open this time, purely as revenge! Seriously though, studying DSA religiously helped me alot. I was also a finalist in Smart India Hackathon 2019 with one of the best team (They know who they are) I have ever worked with. Even though we lost, that was an experience of a lifetime for me. I cracked HackwithInfy, Codevita and couple more such competitions and got a Pre placement Interview and offers from that. So yes, DSA!!!!!!! I also participated in TCS Inframind which led to get an internship in TCS, which gave me a direct Interview and a TCS Digital Offer (7L CTC was the highest for our college). I worked on alot of projects, on wayyy diverse domains, just to expand my knowledge. I developed a student tracking system as my main project, the whole aim was to find out which student is bunking where in the campus. I still remember the praise it got from the faculty and the backlash from the students :v.</p>\n<h4>fourth year</h4>\n<p>This year was mostly dedicated to placements. Like every other college, we're only allowed to sit for one company in one salary bracket. First company to visit our campus was Reliance Jio at 3.5L CTC, ironically it wasn't even a proper drive, all they had was an assessment which even school students can solve and for interviews they just asked what is testing and average interview lasted for 5mins. I cracked that easily, though it wasn't a challenge at all. Second compant was Persistent Systems, of which I cleared all the rounds, including the advanced coding rounds, only to be offered 4.5L CTC. Third Company was Infosys where I was offered 5L CTC, that was off campus because I cleared HackwithInfy rounds. Fourth company was TCS with a Digital Offer of 7L CTC (Thanks to Inframind). I was happy with the Digital offer because that's what I thought was the most I could get. Luckily, Thanks to Cisco Ideathon, I bagged the highest package in my college, of approx 18L CTC. You can read more about it <em><u><a href=\"https://pbehre.in/posts/cisco-ideathon-2020-journey\">here</a></u></em>.</p>\n<p>I joined Cisco Systems as a Software Engineer (Intern + Full Time) in my final year. That pretty much sums my college life. On a personal front, I dealt with depression and brain fog alot during the last semester and final months of college.</p>\n<p>Back then, getting Cisco was the dream because I honestly did not hope to get anything more.</p>\n<h3>Getting an offer from Amazon (the actual dream job)</h3>\n<p>I applied to Amazon in Feb 21, when I was still an Intern with Cisco. I had a habit of applying to atleast 20 jobs in a week, because of the notion that <em>You apply to 100, you get response from 1</em> . Following that only, I applied to Amazon in Feb and got a link for Online Assessment. I did good in that, atleast I assumed I did. They never tell you the results and it's not like I was expecting anything because I was out of practice.</p>\n<p>First step to get in was the Resume Shortlisting and the Online Assessment. They're both pretty self explanatory, and I actually consider these two the most difficult parts.</p>\n<p>6 months later, around in july I got an interview call from Amazon. They informed me 3 days before the interview. So it was only natural that I panic because I have no idea how to prepare for interviews or what they'll ask. Luckily, a good friend came to my rescue and helped me prepare. She also cracked Amazon just a few months before so she was a major help.</p>\n<p>Companies like Amazon majorly focus on your core Data Structures and Algorithmic Skills. They also pay deep attention to your behavorial traits, which they term it as leadership principles. Everything a person do can tell you alot about their traits. Amazon Interview Process is different than most other companies and is one of the most interesting interview experience I've had. They assess the best qualities in you in an unique way.</p>\n<p>There are usually four rounds:</p>\n<ul>\n<li>\n<p>DSA and Algo Round</p>\n<p>They Focus on your dsa abilities via a coding questions</p>\n</li>\n<li>\n<p>Coding Round</p>\n<p>They focus on on your coding abilities. You're given a live code link to their internal tool where you have to solve a question live, without any IDE help. They judge your logic forming abilities and how you can Deliver Results and Earn trust of your interviewer.</p>\n<p>They also ask a bunch of behaviourial questions to judge your abilities to perform in a corporate setting.</p>\n<p>First Two rounds are often mixed together. So Just take it like first two are your skill and abilities test.</p>\n</li>\n<li>\n<p>Hiring Manager Round</p>\n<p>Here you meet your hiring manager and discuss on the prospects of the project and your prior experience and how it may compliment your new job if you get it. They majorly focus on leadership principles and how you were able to solve complex problems in your past experiences.</p>\n</li>\n<li>\n<p>Bar Raiser</p>\n<p>This is probably the most important part of any process. At Amazon, Every new hire has to raise the bar. That is, You have to be better than 50% of all the existing employees at that role to be hired. Raising the bar in Amazon is very crucial and they take it very seriously, that's how they Make sure they hire the best talent there is. Along with raising the bar, they also judge you on how you can growth over the years in your role. These two factors are very important in your final hiring decision.</p>\n</li>\n</ul>\n<p><em><strong>Amazon asks the candidates to sign a Non-Disclosure Agreement so I will be respecting that and I won't be sharing any crucial information or questions or names of any personnel involved.</strong></em></p>\n<h2>TL;DR</h2>\n<p>There is no formula to crack PBC / FAANG / MAANG companies. There is no shortcut to do that. If you're looking for a formala that says</p>\n<blockquote>\n<p>FAANG Interviews can be cracked in 'x' amount of preparation days</p>\n</blockquote>\n<p>You couldn't be more wrong. There are many who prepare for months before an interview and still don't clear it. The main reason behind that is even you prepared for 'x' months, you cannot become exceptional just from preparing, you need to have that passion, you need to have that <strong>PRACTICE</strong> over the years. FAANG only hires exceptional talent, you cannot become exceptional just be months of preparation, you need to have that personality of solving problems and innovating. You need to have a lifestyle where your curiosity drives you and you develop excellent problem solving capabilities. For those who have '<strong>it</strong>', nothing is difficult. For those you don't and are in Tier 3, Sorry to burst your bubble, but...</p>\n<p><img src=\"https://i.imgur.com/lmPYglh.png\" alt=\"No Shortcuts\"></p>\n<p>I got offered <strong>Software Development Engineer - I</strong> at <strong>Amazon India</strong>, that may not be a big feat for most but for someone who's in a same city tier 2/3 private college, this is something more than you can ever imagine. Surely it was not easy at all. Infact easy is not the term I would use anywhere in this blog.</p>\n","title":"From a tier 3 college student to FAANG engineer","date":"2022-01-15","excerpt":"Journey from being a small city college student to being an engineer in one of the biggest Tech Companies in the World."},"grpc-scala-server":{"id":"grpc-scala-server","contentHtml":"<h2>What is RPC?</h2>\n<p><strong>Remote Procedure Call (RPC)</strong> is a powerful technique for constructing <strong>distributed, client-server based applications</strong>. It is based on extending the conventional local procedure calling so that the <strong>called procedure need not exist in the same address space as the calling procedure</strong>.</p>\n<h1>What is gRPC?</h1>\n<img src=\"https://grpc.io/img/landing-2.svg\" alt=\"gRPC Architecture\" />\n<p>gRPC is a modern open source high performance RPC framework developed by Google and Introduced in 2015 that can run in any environment and communicate to any service in any supported language. It used by many major Internet Companies such as Google, Netflix, Cisco, CoreOS, Juniper etc.</p>\n<p>gRPC uses <a href=\"https://developers.google.com/protocol-buffers\">Protocol Buffers</a> as it's Interface Definition Language.</p>\n<h1>Let's get started!</h1>\n<p>I came upon a problem in my work where I was required to use gRPC with Scala. Being a Software Developer, I knew how to do it in Java very well, but for some engineering reasons I was asked to write the same in Scala. Scala being a JVM language makes it very easy to write very efficient code in a very short footprint. The work that takes 500 lines of code in Java can be done easily in &#x3C;100 lines in Scala. Due to lack of documentation from ScalaPB on Streaming Calls, I decided to write my on article on this.</p>\n<h2>Prerequisites</h2>\n<ol>\n<li>Basic knowledge of Scala</li>\n<li>An empty scala project set up with <a href=\"https://scalapb.github.io/docs/\">ScalaPB</a> and <a href=\"https://www.scala-sbt.org/\">SBT</a></li>\n<li>Basic Knowledge of <a href=\"https://developers.google.com/protocol-buffers/docs/overview\">ProtoBufs</a></li>\n</ol>\n<h2>Creating the Protobuf</h2>\n<p>Firstly, we need a proto file containing the messages and a service. We'll create a <strong>HelloWorldProto.proto</strong> file inside <em>src/main/protobuf</em> folder.</p>\n<div class=\"remark-highlight\"><pre class=\"language-protobuf\"><code class=\"language-protobuf\"><span class=\"token keyword\">syntax</span><span class=\"token operator\">=</span><span class=\"token string\">\"proto3\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">package</span> in<span class=\"token punctuation\">.</span>pbehre<span class=\"token punctuation\">.</span>proto<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">message</span> <span class=\"token class-name\">HelloRequest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">string</span> name<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">message</span> <span class=\"token class-name\">HelloResponse</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">string</span> welcome_message<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">service</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">rpc</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloRequest</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloResponse</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">rpc</span> <span class=\"token function\">clientStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">stream</span> <span class=\"token class-name\">HelloRequest</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloResponse</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">rpc</span> <span class=\"token function\">serverStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloRequest</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">stream</span> <span class=\"token class-name\">HelloResponse</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">rpc</span> <span class=\"token function\">streamHello</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">stream</span> <span class=\"token class-name\">HelloRequest</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">stream</span> <span class=\"token class-name\">HelloResponse</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li><em>HelloRequest</em> - Message to be sent as request to the server</li>\n<li><em>HelloResponse</em> - Message to be sent as Response to the client</li>\n<li><em>HelloWorld</em> - gRPC service containing different methods:\n<ul>\n<li><em>sayHello</em> - Unary Call</li>\n<li><em>clientStream</em> - Client Side Streaming</li>\n<li><em>serverStream</em> - Server Side Streaming</li>\n<li><em>streamHello</em> - Bi-Directional Streaming</li>\n</ul>\n</li>\n</ul>\n<h2>Implementing the service - <em>HelloWorld</em></h2>\n<p>Create a new file <strong>HelloService.scala</strong> in <em>src/main/scala/[your package]/</em> with the below content:</p>\n<div class=\"remark-highlight\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">in<span class=\"token punctuation\">.</span>pbehre<span class=\"token punctuation\">.</span>scala</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">in<span class=\"token punctuation\">.</span>pbehre<span class=\"token punctuation\">.</span>proto<span class=\"token punctuation\">.</span></span>HelloWorldProto<span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>grpc<span class=\"token punctuation\">.</span>stub<span class=\"token punctuation\">.</span></span>StreamObserver\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span>Future\n\n<span class=\"token keyword\">class</span> HelloService <span class=\"token keyword\">extends</span> HelloWorldGrpc <span class=\"token punctuation\">.</span>HelloWorld <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//Service to implement calls</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>This is the basic service structure, needs to extend the HelloWorldGrpc.HelloWorld Base Implementation Class. Let's go ahead and override the methods</p>\n<h3>Unary Call - sayHello</h3>\n<p>This call takes a single <em>HelloRequest</em> Object and Returns a <em>Future</em> with <em>HelloResponse</em> Object.</p>\n<div class=\"remark-highlight\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> sayHello<span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> name <span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>name\n    <span class=\"token keyword\">val</span> reply <span class=\"token operator\">=</span> HelloResponse<span class=\"token punctuation\">(</span>welcomeMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"Welcome, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span>\n    Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Client Side Streaming - clientStream</h3>\n<p>This will take a stream of objects from the client in a request observer, and then return them back to the client once the stream is end/committed in a single <em>HelloResponse</em> Object. Only one request session is used to stream content to the server.</p>\n<div class=\"remark-highlight\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> clientStream<span class=\"token punctuation\">(</span>responseObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> count<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> names<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">val</span> requestObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onNext<span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Received request: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        names<span class=\"token operator\">+=</span> value<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onError<span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        responseObserver<span class=\"token punctuation\">.</span>onNext<span class=\"token punctuation\">(</span>HelloResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome, \"</span> <span class=\"token operator\">+</span> names <span class=\"token operator\">+</span> <span class=\"token string\">\"\\nTotal Count: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        responseObserver<span class=\"token punctuation\">.</span>onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"clientStream::onCompleted()\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    requestObserver\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Server Side Streaming - serverStream</h3>\n<p>Will take a single request <em>HelloRequest</em> object which will establish the request and thanks to http2.0, the grpc function will return a multiple stream of <em>HelloResponse</em> object in the same request.</p>\n<div class=\"remark-highlight\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> serverStream<span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">,</span> responseObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> values <span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"First Stream packet\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Second stream packet\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Third Stream packet\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Fourth Stream packet\"</span>\n    <span class=\"token punctuation\">)</span>\n    values<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>s <span class=\"token keyword\">=></span> responseObserver<span class=\"token punctuation\">.</span>onNext<span class=\"token punctuation\">(</span>HelloResponse<span class=\"token punctuation\">(</span>welcomeMessage <span class=\"token operator\">=</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    responseObserver<span class=\"token punctuation\">.</span>onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Bi-Directional Streaming - streamHello</h3>\n<p>Takes a stream of <em>HelloRequest</em> Objects and returns a stream of <em>HelloResponse</em> objects</p>\n<div class=\"remark-highlight\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> streamHello<span class=\"token punctuation\">(</span>responseObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> requestObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onNext<span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Received a Request: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        responseObserver<span class=\"token punctuation\">.</span>onNext<span class=\"token punctuation\">(</span>HelloResponse<span class=\"token punctuation\">(</span>welcomeMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World, \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onError<span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Service completed\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    requestObserver\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4>That's it!</h4>\n<h4>Your final file service file should look like:</h4>\n<div class=\"remark-highlight\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">in<span class=\"token punctuation\">.</span>pbehre<span class=\"token punctuation\">.</span>scala</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">in<span class=\"token punctuation\">.</span>pbehre<span class=\"token punctuation\">.</span>proto<span class=\"token punctuation\">.</span></span>HelloWorldProto<span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>grpc<span class=\"token punctuation\">.</span>stub<span class=\"token punctuation\">.</span></span>StreamObserver\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span>Future\n\n<span class=\"token keyword\">class</span> HelloService <span class=\"token keyword\">extends</span> HelloWorldGrpc <span class=\"token punctuation\">.</span>HelloWorld <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> sayHello<span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> name <span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>name\n    <span class=\"token keyword\">val</span> reply <span class=\"token operator\">=</span> HelloResponse<span class=\"token punctuation\">(</span>welcomeMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"Welcome, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span>\n    Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> streamHello<span class=\"token punctuation\">(</span>responseObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> requestObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onNext<span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Received a Request: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        responseObserver<span class=\"token punctuation\">.</span>onNext<span class=\"token punctuation\">(</span>HelloResponse<span class=\"token punctuation\">(</span>welcomeMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World, \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onError<span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Service completed\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    requestObserver\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> clientStream<span class=\"token punctuation\">(</span>responseObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> count<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> names<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">val</span> requestObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StreamObserver<span class=\"token punctuation\">[</span>HelloRequest<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onNext<span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Received request: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        names<span class=\"token operator\">+=</span> value<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onError<span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        println<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        responseObserver<span class=\"token punctuation\">.</span>onNext<span class=\"token punctuation\">(</span>HelloResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome, \"</span> <span class=\"token operator\">+</span> names <span class=\"token operator\">+</span> <span class=\"token string\">\"\\nTotal Count: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        responseObserver<span class=\"token punctuation\">.</span>onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        println<span class=\"token punctuation\">(</span><span class=\"token string\">\"clientStream::onCompleted()\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    requestObserver\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> serverStream<span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> HelloRequest<span class=\"token punctuation\">,</span> responseObserver<span class=\"token operator\">:</span> StreamObserver<span class=\"token punctuation\">[</span>HelloResponse<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> values <span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"First Stream packet\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Second stream packet\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Third Stream packet\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Fourth Stream packet\"</span>\n    <span class=\"token punctuation\">)</span>\n\n    values<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>s <span class=\"token keyword\">=></span> responseObserver<span class=\"token punctuation\">.</span>onNext<span class=\"token punctuation\">(</span>HelloResponse<span class=\"token punctuation\">(</span>welcomeMessage <span class=\"token operator\">=</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    responseObserver<span class=\"token punctuation\">.</span>onCompleted<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4></h4>\n<h2>Implementing the GRPC Server</h2>\n<p>Create a new file <strong>HelloServer.scala</strong> in <em>src/main/scala/[your package]/</em> with the below content:</p>\n<div class=\"remark-highlight\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">in<span class=\"token punctuation\">.</span>pbehre<span class=\"token punctuation\">.</span>scala</span>\n\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">in<span class=\"token punctuation\">.</span>pbehre<span class=\"token punctuation\">.</span>proto<span class=\"token punctuation\">.</span></span>HelloWorldProto<span class=\"token punctuation\">.</span>_\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>grpc<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">{</span>Server<span class=\"token punctuation\">,</span> ServerBuilder<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">{</span>LogManager<span class=\"token punctuation\">,</span> Logger<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span>ExecutionContext\n\n<span class=\"token keyword\">object</span> App <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> logger<span class=\"token operator\">:</span> Logger <span class=\"token operator\">=</span> Logger<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span>classOf<span class=\"token punctuation\">[</span>App<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> port <span class=\"token operator\">=</span> <span class=\"token number\">50051</span>\n\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> HelloWorldServer<span class=\"token punctuation\">(</span>ExecutionContext<span class=\"token punctuation\">.</span>global<span class=\"token punctuation\">)</span>\n    server<span class=\"token punctuation\">.</span>start\n    server<span class=\"token punctuation\">.</span>blockUntilShutdown\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> HelloWorldServer<span class=\"token punctuation\">(</span>executionContext<span class=\"token operator\">:</span> ExecutionContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">self</span> <span class=\"token keyword\">=></span>\n  <span class=\"token keyword\">private</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">var</span> server<span class=\"token operator\">:</span> Server <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token keyword\">def</span> start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    server <span class=\"token operator\">=</span> ServerBuilder\n      <span class=\"token punctuation\">.</span>forPort<span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>addService<span class=\"token punctuation\">(</span>HelloWorldGrpc<span class=\"token punctuation\">.</span>bindService<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> HelloService<span class=\"token punctuation\">,</span> executionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    App<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting server on port: \"</span> <span class=\"token operator\">+</span> App<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>addShutdownHook <span class=\"token punctuation\">{</span>\n      System<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">(</span><span class=\"token string\">\"*** shutting down gRPC server since JVM is shutting down\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      System<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">(</span><span class=\"token string\">\"*** server shut down\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">def</span> stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>server <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      server<span class=\"token punctuation\">.</span>shutdown<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">def</span> blockUntilShutdown<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>server <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      server<span class=\"token punctuation\">.</span>awaitTermination<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4>That's it! You're done with the code.</h4>\n<p>Client Implementation coming soon!</p>\n<p>You can find the code and a sample project in this repository: <a href=\"https://github.com/pavitra14/grpc_hello_server\">Github</a></p>\n","title":"Using gRPC with Scala - Server Implementation","date":"2021-03-27","excerpt":"Handling Unary, Client Side Streaming, Server Side Streaming and Bi-Directional Streaming Calls in gRPC using Scala"},"hello-world":{"id":"hello-world","contentHtml":"<h2>Hello World!</h2>\n<p>This is my first blog post. Many juniors from my college encouraged me to start writing a blog about my journey as a software engineer. This is my attempt for the same.</p>\n<p>I can't promise anyone anything nor can I promise that I will regularly update this blog. I can only write content when I'm motivated enough and get time in schedule.</p>\n<p>So a little bit about me,\nHi, I'm Pavitra (Pa-vi-tr). I'm a Software Engineer (SE/SDE/SWE Many roles one job). I was always into computers and gadgets since my childhood, thus I decided to the same as my career as well. I was not going to set up this or any blog for a long time but I always wanted to try Next.js, luckily their getting started tutorial was about making a static blog only, so why not.</p>\n<p>Currently I'm looking for ideas to write on, feel free to contact me via email <a href=\"mailto:me@pbehre.in\" title=\"Email me\">me@pbehre.in</a></p>\n<p>Looking forward to writing :)</p>\n","title":"First Blog Post!","date":"2021-03-10","excerpt":"This is my first blog post. Many juniors from my college encouraged me to start writing a blog about my journey as a software engineer. This is my attempt for the same."},"itgirlniki-podcast":{"id":"itgirlniki-podcast","contentHtml":"<h3>Podcast on my Journey and Internship Experience</h3>\n<iframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/6FKvkvze3wo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","title":"Watch the podcast on How to get an Intership at Cisco and my Journey","date":"2021-06-13","excerpt":"Nikita Asrani aka YT: ITgirlniki invited me on a candid session/podcast on how to get an internship at a Fortune-100 company and on my journey to be a SDE."},"linkedlist-implementation-operations":{"id":"linkedlist-implementation-operations","contentHtml":"<p><img src=\"https://i.imgur.com/NgbfvK9.png\" alt=\"Linked List\"></p>\n<h2>What is a Linked List?</h2>\n<p>A Linked list is a common data structure made of chain of nodes, in which each node contains two fields, <em>data</em>  which holds the data and <em>next</em> which holds the address to next node in the chain.</p>\n<p>The <strong>head pointer</strong> points to the first node, and the last element of the list points to <strong>null</strong>. When the list is empty, the head pointer points to <strong>null</strong>.</p>\n<p>Linked lists can dynamically increase in size and it is easy to insert and delete from a linked list because unlike arrays, we only need to change the pointers of the previous element and the next element to insert or delete an element.</p>\n<p>Linked lists are typically used to create file systems, adjacency lists, and hash tables.</p>\n<h3>Types of Linked Lists</h3>\n<ul>\n<li>Singly Linked List (Uni-directional)</li>\n<li>Doubly Linked List (Bi-directional)</li>\n<li>Circular Linked List</li>\n</ul>\n<p>Linked Lists are very widely used in the industry and it is also one of the most important topics which you should positively know before appearing for a technical interview. Operations on Linked Lists are fairly easy, but optimised operations are what catches the eye. In this article, we'll take a look at most of them, in their most optimised form (Linear Time Complexity at max).</p>\n<p>We're using C++ as our base language and will continue to do so for most DSA tutorials.</p>\n<h2>Operations on Linked Lists</h2>\n<h3>Creating the List Data Structure</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;bits/stdc++.h></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Objects of this class will act as nodes in our list</span>\nclass Node <span class=\"token punctuation\">{</span>\n  public<span class=\"token operator\">:</span>\n  <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    this<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Creating a List</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//Will create a sample Linked List of length n, where data will be (i...n)x10 (10,20,30....)</span>\nNode<span class=\"token operator\">*</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Can also use traditional arrays with malloc</span>\n\t<span class=\"token comment\">//\tint* nodes = (int*) malloc(sizeof(int)*n);</span>\n  <span class=\"token comment\">//Creating Nodes</span>\n  vector<span class=\"token operator\">&#x3C;</span>Node<span class=\"token operator\">*</span><span class=\"token operator\">></span> nodes<span class=\"token punctuation\">;</span> <span class=\"token comment\">//Vector to store nodes temporarily</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;=</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//nodes[i] = new Node(i*10); //if using traditional arrays</span>\n    nodes<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//pushing new nodes back into the vector </span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//Connecting individual nodes</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//Returning the head node</span>\n  <span class=\"token keyword\">return</span> nodes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Displaying/Printing a List</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"----------------------------------\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span>temp<span class=\"token operator\">-></span>data<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"->\"</span><span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span>temp<span class=\"token operator\">-></span>data<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"----------------------------------\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* Output</span>\n<span class=\"token comment\">----------------------------------</span>\n<span class=\"token comment\">10->20->30->40->50->60->70->80->90->100->110->120->130->140->150->160->170->180->190->200->210->220->230->240->250</span>\n<span class=\"token comment\">----------------------------------</span>\n<span class=\"token comment\">*/</span>\n</code></pre></div>\n<h3>Getting Size/Length of Linked List (Linear Time Complexity/ O(n))</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Size of List is \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>n<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Inserting at last of Linked List (Linear Time Complexity O(n))</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">insert_at_last</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Inserting at front of Linked List (Constant Time Complexity O(1))</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\">Node<span class=\"token operator\">*</span> <span class=\"token function\">insert_at_first</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> new <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Inserting a Node after Nth Node in Linked List (Linear Time Complexity dependent on value of N O(N))</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">insert_after_n</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">&#x26;&#x26;</span> i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    throw <span class=\"token string\">\"LinkedList Overflow: N doesn't exist\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  Node<span class=\"token operator\">*</span> forward <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> forward<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Removing a node from Last/Tail of Linked List (Linear Time Complexity O(n))</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">remove_from_last</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Removing Nth Node from Tail of Linked List (1 Pass + Linear Time Complexity / Two Pointer Method)</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">remove_n_from_last</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> offset <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>offset<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&#x26;&#x26;</span> i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    offset <span class=\"token operator\">=</span> offset<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    throw <span class=\"token string\">\"LinkedList Overflow: N doesn't exist\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>offset<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    offset <span class=\"token operator\">=</span> offset<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  Node<span class=\"token operator\">*</span> forward <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> forward<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Reversing a Linked List (Linear Time Complexity O(n))</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\">Node<span class=\"token operator\">*</span> <span class=\"token function\">reverse_list</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> curr <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>curr <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> curr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    curr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n    prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\n    curr <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Find the Middle Node of Linked List (1 Pass + Linear Time Complexity/ Two Pointer Double Speed Method)</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">middleNode</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> fast <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Middle Node is: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>slow<span class=\"token operator\">-></span>data<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Check if the Linked List has a Cycle (1 Pass + Linear Time Complexity/ Two Pointer Double Step Method)</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">checkCycle</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> fast <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fast<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>slow <span class=\"token operator\">==</span> fast<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>Let's Compile the above code in a single file and test!</h2>\n<h3><em><strong>LinkedList.cpp</strong></em></h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;bits/stdc++.h></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\nclass Node <span class=\"token punctuation\">{</span>\n  public<span class=\"token operator\">:</span>\n  <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    this<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nNode<span class=\"token operator\">*</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Creating Nodes</span>\n  vector<span class=\"token operator\">&#x3C;</span>Node<span class=\"token operator\">*</span><span class=\"token operator\">></span> nodes<span class=\"token punctuation\">;</span> <span class=\"token comment\">//Vector to store nodes temporarily</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;=</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    nodes<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//Connecting individual nodes</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> nodes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"----------------------------------\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span>temp<span class=\"token operator\">-></span>data<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"->\"</span><span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span>temp<span class=\"token operator\">-></span>data<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"----------------------------------\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Size of List is \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>n<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insert_at_last</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nNode<span class=\"token operator\">*</span> <span class=\"token function\">insert_at_first</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> new <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">insert_after_n</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">&#x26;&#x26;</span> i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    throw <span class=\"token string\">\"LinkedList Overflow: N doesn't exist\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  Node<span class=\"token operator\">*</span> forward <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> forward<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">remove_from_last</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">remove_n_from_last</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> offset <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>offset<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&#x26;&#x26;</span> i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    offset <span class=\"token operator\">=</span> offset<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    throw <span class=\"token string\">\"LinkedList Overflow: N doesn't exist\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>offset<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    offset <span class=\"token operator\">=</span> offset<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  Node<span class=\"token operator\">*</span> forward <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> forward<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nNode<span class=\"token operator\">*</span> <span class=\"token function\">reverse_list</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> curr <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>curr <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> curr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    curr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n    prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\n    curr <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">middleNode</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> fast <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Middle Node is: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span>slow<span class=\"token operator\">-></span>data<span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">checkCycle</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Node<span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> fast <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fast<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>slow <span class=\"token operator\">==</span> fast<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Creating a Linked List</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Creating a LinkedList\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> LinkedList <span class=\"token operator\">=</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Inserting at end</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Inserting at end\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">insert_at_last</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">,</span> new <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">260</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Inserting at first</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Inserting at first\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  LinkedList <span class=\"token operator\">=</span> <span class=\"token function\">insert_at_first</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Inserting after N</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Inserting after n\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">insert_after_n</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">,</span> new <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Removing from last</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Removing from Last\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">remove_from_last</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Removing from n from last in 1Pass</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Removing from n from last\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">remove_n_from_last</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Reversing a LinkedList</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Reversing a LinkedList\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  LinkedList <span class=\"token operator\">=</span> <span class=\"token function\">reverse_list</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// middleNode of LinkedList in 1Pass</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"middleNode of LinkedList in 1Pass\"</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">middleNode</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayList</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Check if List has a cycle</span>\n  Node<span class=\"token operator\">*</span> CyclicList <span class=\"token operator\">=</span> <span class=\"token function\">createList</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> cTemp <span class=\"token operator\">=</span> CyclicList<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cTemp<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    cTemp <span class=\"token operator\">=</span> cTemp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cTemp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> CyclicList<span class=\"token punctuation\">;</span>\n  cout<span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">\"Cycle in List: \"</span><span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token function\">checkCycle</span><span class=\"token punctuation\">(</span>CyclicList<span class=\"token punctuation\">)</span><span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Output</h3>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ clang++-7 -pthread -std<span class=\"token operator\">=</span>c++17 -o main main.cpp\n$ ./main\nCreating a LinkedList\n----------------------------------\n<span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">230</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">250</span>\n----------------------------------\nSize of List is <span class=\"token number\">24</span>\nInserting at end\n----------------------------------\n<span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">230</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">250</span>-<span class=\"token operator\">></span><span class=\"token number\">260</span>\n----------------------------------\nSize of List is <span class=\"token number\">25</span>\nInserting at first\n----------------------------------\n<span class=\"token number\">0</span>-<span class=\"token operator\">></span><span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">230</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">250</span>-<span class=\"token operator\">></span><span class=\"token number\">260</span>\n----------------------------------\nSize of List is <span class=\"token number\">26</span>\nInserting after n\n----------------------------------\n<span class=\"token number\">0</span>-<span class=\"token operator\">></span><span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">99</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">230</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">250</span>-<span class=\"token operator\">></span><span class=\"token number\">260</span>\n----------------------------------\nSize of List is <span class=\"token number\">27</span>\nRemoving from Last\n----------------------------------\n<span class=\"token number\">0</span>-<span class=\"token operator\">></span><span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">99</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">230</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">250</span>\n----------------------------------\nSize of List is <span class=\"token number\">26</span>\nRemoving from n from last\n----------------------------------\n<span class=\"token number\">0</span>-<span class=\"token operator\">></span><span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">99</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">250</span>\n----------------------------------\nSize of List is <span class=\"token number\">25</span>\nReversing a LinkedList\n----------------------------------\n<span class=\"token number\">250</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">99</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">0</span>\n----------------------------------\nSize of List is <span class=\"token number\">25</span>\nmiddleNode of LinkedList <span class=\"token keyword\">in</span> 1Pass\nMiddle Node is: <span class=\"token number\">110</span>\n----------------------------------\n<span class=\"token number\">250</span>-<span class=\"token operator\">></span><span class=\"token number\">240</span>-<span class=\"token operator\">></span><span class=\"token number\">220</span>-<span class=\"token operator\">></span><span class=\"token number\">210</span>-<span class=\"token operator\">></span><span class=\"token number\">200</span>-<span class=\"token operator\">></span><span class=\"token number\">190</span>-<span class=\"token operator\">></span><span class=\"token number\">180</span>-<span class=\"token operator\">></span><span class=\"token number\">170</span>-<span class=\"token operator\">></span><span class=\"token number\">160</span>-<span class=\"token operator\">></span><span class=\"token number\">150</span>-<span class=\"token operator\">></span><span class=\"token number\">140</span>-<span class=\"token operator\">></span><span class=\"token number\">130</span>-<span class=\"token operator\">></span><span class=\"token number\">120</span>-<span class=\"token operator\">></span><span class=\"token number\">110</span>-<span class=\"token operator\">></span><span class=\"token number\">100</span>-<span class=\"token operator\">></span><span class=\"token number\">90</span>-<span class=\"token operator\">></span><span class=\"token number\">80</span>-<span class=\"token operator\">></span><span class=\"token number\">70</span>-<span class=\"token operator\">></span><span class=\"token number\">60</span>-<span class=\"token operator\">></span><span class=\"token number\">50</span>-<span class=\"token operator\">></span><span class=\"token number\">40</span>-<span class=\"token operator\">></span><span class=\"token number\">30</span>-<span class=\"token operator\">></span><span class=\"token number\">99</span>-<span class=\"token operator\">></span><span class=\"token number\">20</span>-<span class=\"token operator\">></span><span class=\"token number\">10</span>-<span class=\"token operator\">></span><span class=\"token number\">0</span>\n----------------------------------\nSize of List is <span class=\"token number\">25</span>\nCycle <span class=\"token keyword\">in</span> List: <span class=\"token number\">1</span>\n</code></pre></div>\n<h3>Compile Command:</h3>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#For GCC/G++ - Unix</span>\n$ g++ LinkedList.cpp -o LinkedList\n</code></pre></div>\n<h3>Checkout the REPL here: <a href=\"https://replit.com/@PavitraBehre/LinkedListCpp\">LinkedListCPP</a></h3>\n<h3>Github</h3>\n<ul>\n<li>\n<h4>C++: <a href=\"https://github.com/pavitra14/LinkedListCpp\">pavitra14/LinkedListCpp</a></h4>\n</li>\n<li>\n<h4>Python 3: <a href=\"https://github.com/pavitra14/LinkedListPy\">pavitra14/LinkedListPy</a></h4>\n</li>\n</ul>\n","title":"Linked List Implementation and All Operations","date":"2021-04-03","excerpt":"Linked List Data Structure Implementation and Operations in best time complexities"}},"getAllPostIds":[{"params":{"id":"automate-mouse"}},{"params":{"id":"cisco-ideathon-2020-journey"}},{"params":{"id":"coding-exercise-tictactoe"}},{"params":{"id":"from-tier3-to-faang"}},{"params":{"id":"grpc-scala-server"}},{"params":{"id":"hello-world"}},{"params":{"id":"itgirlniki-podcast"}},{"params":{"id":"linkedlist-implementation-operations"}}],"getSortedPostsData":[{"id":"from-tier3-to-faang","title":"From a tier 3 college student to FAANG engineer","date":"2022-01-15","excerpt":"Journey from being a small city college student to being an engineer in one of the biggest Tech Companies in the World."},{"id":"automate-mouse","title":"Automate Mouse Cursor Randomly via Python","date":"2021-06-27","excerpt":"Automate your desktop cursor using Python in Less than 20 lines your code. Useful to always appear online in office applications :v"},{"id":"itgirlniki-podcast","title":"Watch the podcast on How to get an Intership at Cisco and my Journey","date":"2021-06-13","excerpt":"Nikita Asrani aka YT: ITgirlniki invited me on a candid session/podcast on how to get an internship at a Fortune-100 company and on my journey to be a SDE."},{"id":"linkedlist-implementation-operations","title":"Linked List Implementation and All Operations","date":"2021-04-03","excerpt":"Linked List Data Structure Implementation and Operations in best time complexities"},{"id":"coding-exercise-tictactoe","title":"Coding Exercise: Writing a CPU Random TicTacToe Game","date":"2021-04-01","excerpt":"Writing a TicTacToe Console Game in C++ and Java - A Coding Exercise for beginners"},{"id":"cisco-ideathon-2020-journey","title":"My Cisco Ideathon 2020 Journey","date":"2021-03-28","excerpt":"How I prepared for Cisco Ideathon 2020 and How to prepare for Ideathon 2021"},{"id":"grpc-scala-server","title":"Using gRPC with Scala - Server Implementation","date":"2021-03-27","excerpt":"Handling Unary, Client Side Streaming, Server Side Streaming and Bi-Directional Streaming Calls in gRPC using Scala"},{"id":"hello-world","title":"First Blog Post!","date":"2021-03-10","excerpt":"This is my first blog post. Many juniors from my college encouraged me to start writing a blog about my journey as a software engineer. This is my attempt for the same."}]}